{
	// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
  // }
  "action": {
    "prefix": "action",
    "body": "export const ${1:actionName} = (${2:data}) => ({\n\t${3:data},\n\ttype: ${4:type});",
    "description": "Redux action"
  },

  "action with constant": {
    "prefix": "actionconst",
    "body": "export const ${1:CONSTANT} = '${1:CONSTANT}';\nexport const ${2:actionName} = (${3:data}) => ({\n\t${4:data},\n\ttype: ${1:type},\n});"
  },

  "reselect createSelector": {
    "prefix": "reselect",
    "body": "export const ${1:selector} = createSelector(\n\t${2:first selector},\n\t${3:arg} => ${3:arg}$0\n);"
  },

	"constant": {
    "prefix": "const",
    "body": "export const ${1:CONSTANT} = '${1:CONSTANT}';"
  },

  "function block": {
    "prefix": "fun",
    "body": "($1) => {\n\t$2\n}"
  },

  "function return block": {
    "prefix": "funr",
    "body": "($1) => (\n\t$2\n)",
    "description": "Function with immediate return"
  },

  "function return object": {
    "prefix": "funro",
    "body": "($1) => ({\n\t$2\n})",
    "description": "Function returns object"
  },

  "todo": {
    "prefix": "todo",
    "body": "{/* TODO: $0 */}"
  },
  "fixme": {
    "prefix": "fix",
    "body": "{/* FIXME: $0 */}"
  },
  "hack": {
    "prefix": "hack",
    "body": "{/* HACK: $0 */}"
  },
  "note": {
    "prefix": "note",
    "body": "{/* NOTE: $0 */}"
  },
  "review": {
    "prefix": "review",
    "body": "{/* REVIEW: $0 */}"
  },
  "debug": {
    "prefix": "debug",
    "body": "{/* DEBUG: $0 */}"
  }
}
