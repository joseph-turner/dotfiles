[alias]
  # Branch
  br  = branch
  bra = branch -ra
  # checkout new branch based on updated master
  cmb = co -B
  # checkout new branch
  cob = co -b
  com = co -m
  cor = co -r
  col = cor 1
  corl = co -l

  # Commits/Pulls/Pushes
  a         = add -A
  amend     = commit -a --amend --no-edit
  cl        = "!f() { git clone $@; [[ -n $2 ]] && cd $2 || cd $(basename $_ .git); }; f" # changes directory after cloning repo
  cmp       = !git cm -p $@
  cp        = cherry-pick
  pp        = !git up && git pu
  publish   = !git push -u origin $(git rev-parse --abbrev-ref HEAD) # pushes to new remote branch
  unpublish = !git push origin :$(git rev-parse --abbrev-ref HEAD) # deletes current branch's remote

  # Config
  ec  = config --global -e
  ecl = config --local -e

  # Diff/Log
  df      = diff -w
  dlc     = diff --cached HEAD^
  ds      = diff --staged
  f       = "!git ls-files | grep -i" # Grep on filename
  fl      = log -u
  grep    = grep -Ii
  lasttag = describe --tags --abbrev=0
  lt      = describe --tags --abbrev=0
  lg      = log --graph --decorate --abbrev-commit --pretty=fuller --date=relative --name-status --branches
  ls      = ls-files
  mine    = !git lg --author=$(git config user.name) --branches
  slg     = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(green)(%cr) %C(bold blue)<%an>%Creset'

  # Merges
  abort   = "!$(git merge --abort &>/dev/null) || $(git rebase --abort &>/dev/null) || echo \"Not merging or rebasing\""
  ma      = merge --abort
  mc      = !git a && git merge --continue
  mcp     = !git mc && printf '\nPushing changes\n' && git pu
  mm      = merge-master
  mmp     = merge-master -p
  mmr     = merge-master -r
  mnc     = merge --no-commit --no-ff
  mt      = mergetool
  ra      = rebase --abort
  rc      = !git rebase --continue || git mergetool
  ours    = "!f() { git co --ours $@ && git add $@; }; f"
  theirs  = "!f() { git co --theirs $@ && git add $@; }; f"

  # Resets
  bounce  = "!f() { git clix && bounce \"$1\"; }; f"
  clx     = clean -fdx
  clix    = clean -fdix
  rh      = reset --hard
  rs      = reset --soft
  mundo   = reset HEAD~1 --mixed # resets the previous commit, but keeps all the changes from that commit
  undo    = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f" # undo from here http: //megakemp.com/2016/08/25/git-undo/

  # Stashes
  sa  = stash apply
  sb  = stash branch
  sd  = stash drop
  sl  = stash list
  sp  = stash pop
  ss  = stash save -u

  # Status
  st  = status -sb --ignore-submodules

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local   = cyan
  remote  = green

[color "diff"]
  meta  = yellow
  frag  = magenta
  old   = red bold
  new   = green
  plain = white

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[core]
  editor       = code-insiders --wait
  excludesfile = ~/.gitignore
  fscache      = true
  ignore       = dirty
  preloadindex = true

[credential]
  helper = osxkeychain

[diff]
  tool = vscode
  tool = p4mergetool

[difftool "p4mergetool"]
  cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge "$LOCAL" "$REMOTE"

[difftool "vscode"]
  cmd = code-insiders --wait --diff $LOCAL $REMOTE

[help]
  autocorrect = 1

[merge]
  tool = vscode
  tool = p4mergetool

[mergetool "p4mergetool"]
  cmd           = /Applications/p4merge.app/Contents/Resources/launchp4merge "$PWD/$BASE" "$PWD/$LOCAL" "$PWD/$REMOTE" "$PWD/$MERGED"
  trustExitCode = false

[mergetool "vscode"]
  cmd = code-insiders --wait $MERGED

[mergetool]
  keepBackup = false

# This is Git's per-user configuration file.
[user]
  name  = Joseph Turner
  email = jturner@overstock.com
