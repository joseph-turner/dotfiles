#!/usr/local/bin/zsh

usage() {
  echo "usage: g[it] co [<options>] <branch>"
  echo "   or: g[it] co [<options>] -- <file>..."
  echo
  echo "    -B <branch>       create and checkout a new branch based on latest master branch"
  echo "    -b <branch>       create and checkout a new branch"
  echo "    -f <file-name>    remove changes from file"
  echo "    -m                checkout master"
  echo "    -r [<number>]     checkout recent branch"
}

exists() {
  git rev-parse --verify --quiet $1 && echo "Branch already exists."
}

ask_merge_master() {
  if read -q "?Do you want to merge latest from master? (y/N)"; then
    return 0
  fi
  return 1
}

while getopts ":B:b:lmr:" opt; do
  case ${opt} in
    B) # Checkout new branch based on latest master
      if exists $OPTARG; then
        git checkout $OPTARG && ask_merge_master $OPTARG && git merge-master
        return 0
      fi

      git checkout master
      git up
      git checkout -b $OPTARG
      return 0
      ;;
    b) # Checkout new branch based on currently checked out branch
      exists $OPTARG && git checkout $OPTARG && return 0
      git checkout -b $OPTARG
      return 0
      ;;
    l)
      git recent -l
      return 0
      ;;
    m) # Checkout master branch
      git checkout master
      return 0
      ;;
    r) # Checkout recent branch
      git recent -e $OPTARG
      return 0
      ;;
    \?)
      usage
      return 1
      ;;
    : )
      [[ $OPTARG == 'r' ]] && git recent -e && return 0
      echo "Invalid option: -$OPTARG requires an argument" 1>&2
      return 1
      ;;

  esac
done
shift $((OPTIND -1))

git checkout $@
