#!/bin/zsh

autoload colors; colors

local stashed=0

usage() {
  echo "$fg[blue]usage: g[it] co [<options>] <branch>"
  echo "   or: g[it] co [<options>] -- <file>..."
  echo
  echo "    -B <branch>       create and checkout a new branch based on latest master branch"
  echo "    -b <branch>       create and checkout a new branch"
  echo "    -f <file-name>    remove changes from file"
  echo "    -m                checkout master"
  echo "    -r [<number>]     checkout recent branch$reset_color"
}

exists() {
  git rev-parse --verify --quiet $1 && echo "Branch already exists.\n"
}

ask_merge_master() {
  if read -qs "?Do you want to merge latest from master? (y/N)"$'\n'; then
    return 0
  fi
  return 1
}

ask_unstash() {
  [[ $stashed != 1 ]] && return 1;
  if read -qs "?Do you want to pop the changes stashed from the previous branch?"; then
    echo && git stash pop
  fi
}

stash() {
  git conditional-stash && stashed=1
}

unstash() {
  [[ $stashed == 1 ]] && echo && git stash pop
}

local default_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')

while getopts ":B:b:lmr:" opt; do
  case ${opt} in
    B) # Checkout new branch based on latest master
      if exists $OPTARG; then
        stash
        git checkout $OPTARG && ask_merge_master $OPTARG && git merge-master
        git check-stash
        return 0
      fi

      stash
      git checkout $default_branch
      git up || echo "\n$fg[yellow]Pull failed. Don't forget to rebase $default_branch$reset_color\n"
      git checkout -b $OPTARG
      ask_unstash
      return 0
      ;;
    b) # Checkout new branch based on currently checked out branch
      stash
      exists $OPTARG && git checkout $OPTARG && return 0
      git checkout -b $OPTARG
      unstash
      return 0
      ;;
    l)
      git recent -l
      return 0
      ;;
    m) # Checkout master branch
      stash
      git checkout $default_branch
      git check-stash
      return 0
      ;;
    r) # Checkout recent branch
      git recent $OPTARG
      git check-stash
      return 0
      ;;
    \?)
      usage
      return 1
      ;;
    : )
      [[ $OPTARG == 'r' ]] && git recent && git check-stash && return 0
      echo "$fg[orange]Invalid option: -$OPTARG requires an argument$reset_color" 1>&2
      usage
      return 1
      ;;

  esac
done
shift $((OPTIND -1))

stash

git checkout $@

if [[ $stashed == 1 ]]; then
  unstash
  return 0
else
  git check-stash $@
fi
