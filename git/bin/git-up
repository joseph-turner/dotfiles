#!/bin/zsh

autoload colors; colors

local check=0
local stashed

while getopts "C" opt; do
  case $opt in
    C)
      check=false
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      return 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument"
      return 1
      ;;
  esac
done
shift $((OPTIND -1))

local branch=$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)")
if [[ -z $branch ]]; then
  echo "Current branch (`git rev-parse --abbrev-ref HEAD`) has no upstream"
  exit 1
fi
local pkg=false

git check-connection

echo "$fg[blue]Merging from $branch$reset_color\n"

while ! git fetch --prune origin &>/dev/null; do
  echo "\n$fg[red]Error fetching latest $branch!$reset_color"
  if ! read -qs "?Press \"Y\" to try again, or any other key to abort fetch."$'\n'; then
    exit 1
  fi
done

# check for yarn.lock and set dep
if [[ $check = 0 ]]; then
  local gdiff=`git diff --name-only "$branch"`
  [[ $(grep "yarn.lock" <<< $gdiff) ]] && dep=true
fi

if git conditional-stash; then
  stashed=1
fi

git merge "$branch" || git conflicts

[[ $stashed == '1' ]] && git stash pop

function update_dep() {
  echo
  echo "Changes detected in yarn.lock"
  echo
  bounce
}

[[ $dep = true ]] && update_dep

true
